{"version":3,"sources":["backbone/scripts/odata_datatable_view.min.js"],"names":["ODataDataTableView","Backbone","View","extend","buttonCopy","this","$el","find","click","buttonCsv","buttonExcel","buttonPdf","buttonPrint","columns","doColumnSearch","e","preventDefault","dataTable","$input","$","currentTarget","value","val","index","closest","data","dataTableColumn","column","searchString","searchMap","search","draw","events","change tfoot :input","keyup tfoot :input","reload","callback","resetPaging","ajax","remove","destroy","prototype","call","render","_this","options","arguments","length","undefined","_","result","collection","toJSON","html","template","DataTable","settings","fetchData","$count","$filter","filter","array","searchable","map","join","$orderby","order","dir","$search","$select","aoColumns","trim","indexOf","$skip","start","$top","trigger","fetch","then","recordsTotal","count","recordsFiltered","dom","serverSide","Promise","resolve","columnSearchMap","dateEquals","dataSrc","moment","isValid","format","numberEquals","isNaN","numberExpression","replace","toLowerCase","values","split","stringContains","stringEquals"],"mappings":"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","file":"odata_datatable_view.min.js","sourcesContent":["'use strict';\n\n/* global _ Backbone moment */\n\n/* exported ODataDataTableView */\nvar ODataDataTableView = Backbone.View.extend({\n  buttonCopy: function buttonCopy() {\n    this.$el.find('.buttons-copy').click();\n  },\n\n  buttonCsv: function buttonCsv() {\n    this.$el.find('.buttons-csv').click();\n  },\n\n  buttonExcel: function buttonExcel() {\n    this.$el.find('.buttons-excel').click();\n  },\n\n  buttonPdf: function buttonPdf() {\n    this.$el.find('.buttons-pdf').click();\n  },\n\n  buttonPrint: function buttonPrint() {\n    this.$el.find('.buttons-print').click();\n  },\n\n  columns: null,\n\n  doColumnSearch: function doColumnSearch(e) {\n    e.preventDefault();\n\n    if (this.dataTable) {\n      var $input = $(e.currentTarget);\n      var value = $input.val();\n      var index = +$input.closest('td').data('index');\n      var dataTableColumn = this.dataTable.column(index);\n\n      var searchString = '';\n\n      if (this.columns[index].searchMap) {\n        searchString = this.columns[index].searchMap(value, dataTableColumn, index) || '';\n      }\n\n      if (searchString !== dataTableColumn.search()) {\n        dataTableColumn.search(searchString);\n        dataTableColumn.draw();\n      }\n    }\n  },\n\n  events: {\n    'change tfoot :input': 'doColumnSearch',\n    'keyup tfoot :input': 'doColumnSearch'\n  },\n\n  reload: function reload(callback, resetPaging) {\n    if (this.dataTable) {\n      this.dataTable.ajax.reload(callback, resetPaging);\n    }\n  },\n\n  remove: function remove() {\n    if (this.dataTable) {\n      this.dataTable.destroy();\n    }\n\n    Backbone.View.prototype.remove.call(this);\n  },\n\n  render: function render() {\n    var _this = this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (options.columns) {\n      this.columns = _.result(options, 'columns');\n    } else {\n      options.columns = _.result('this', 'columns');\n    }\n\n    options.collection = this.collection.toJSON();\n\n    if (this.dataTable) {\n      this.dataTable.destroy();\n    }\n\n    this.$el.html(this.template(options));\n\n    this.dataTable = this.$el.find('table').DataTable({\n      ajax: function ajax(data, callback, settings) {\n        var fetchData = {};\n\n        // $count\n        fetchData.$count = true;\n\n        // $filter\n        var $filter = data.columns.filter(function (value, index, array) {\n          return value.searchable && value.search && value.search.value;\n        }).map(function (value, index, array) {\n          return value.search.value;\n        }).join(' and ');\n        if ($filter) {\n          fetchData.$filter = $filter;\n        }\n\n        // $orderby\n        fetchData.$orderby = data.order.map(function (value) {\n          return data.columns[value.column].data + ' ' + value.dir;\n        }).join(',');\n\n        // $search\n        if (data.search && data.search.value) {\n          fetchData.$search = '\"' + data.search.value + '\"';\n        }\n\n        // $select\n        var $select = settings.aoColumns.map(function (value) {\n          return value.data;\n        }).map(function (value) {\n          return $.trim(value);\n        }).filter(function (value, index, array) {\n          return array.indexOf(value) === index;\n        }).join(',');\n        if ($select) {\n          fetchData.$select = $select;\n        }\n\n        // $skip\n        fetchData.$skip = data.start;\n\n        // $top\n        fetchData.$top = data.length;\n\n        _this.trigger('loadStart');\n        _this.collection.fetch({ data: fetchData }).then(function () {\n          _this.trigger('loadEnd');\n          callback({\n            data: _this.collection.toJSON(),\n            draw: data.draw,\n            recordsTotal: _this.collection.count || 0,\n            recordsFiltered: _this.collection.count || 0\n          });\n        });\n      },\n      columns: _.result(this, 'columns'),\n      dom: '<\\'row\\'<\\'col-sm-6\\'l><\\'col-sm-6\\'f>><\\'row\\'<\\'col-sm-12\\'<\\'table-responsive\\'tr>>><\\'row\\'<\\'col-sm-5\\'i><\\'col-sm-7\\'p>>B',\n      serverSide: true\n    });\n\n    return Promise.resolve();\n  },\n\n  template: _.template('\\n    <table class=\"table table-bordered table-striped\">\\n      <thead>\\n        <tr>\\n        <% for (var i = 0, l = columns.length; i < l; i++) { %>\\n          <th><%= columns[i].title || columns[i].data %></th>\\n        <% } %>\\n        </tr>\\n      </thead>\\n      <tfoot>\\n        <tr>\\n        <% for (var i = 0, l = columns.length; i < l; i++) { %>\\n          <td data-index=\"<%= i %>\">\\n          <% if (_.result(columns[i], \\'searchHtml\\')) { %>\\n            <%= _.result(columns[i], \\'searchHtml\\') %>\\n          <% } %>\\n          </td>\\n        <% } %>\\n        </tr>\\n      </tfoot>\\n    </table>\\n  ')\n}, {\n  columnSearchMap: {\n    dateEquals: function dateEquals(value, dataTableColumn, index) {\n      var searchString = '';\n      if (value) {\n        if (value === 'NULL') {\n          searchString = dataTableColumn.dataSrc() + ' eq null';\n        } else if (value === '!NULL') {\n          searchString = dataTableColumn.dataSrc() + ' ne null';\n        } else if (moment(value, 'l').isValid()) {\n          searchString = dataTableColumn.dataSrc() + ' eq ' + moment(value, 'l').format();\n        }\n      }\n      return searchString;\n    },\n\n    numberEquals: function numberEquals(value, dataTableColumn, index) {\n      var searchString = '';\n      if (value) {\n        if (value === 'NULL') {\n          searchString = dataTableColumn.dataSrc() + ' eq null';\n        } else if (value === '!NULL') {\n          searchString = dataTableColumn.dataSrc() + ' ne null';\n        } else if (isNaN(value)) {\n          searchString = dataTableColumn.dataSrc() + ' eq ' + value;\n        }\n      }\n      return searchString;\n    },\n\n    numberExpression: function numberExpression(value, dataTableColumn, index) {\n      var searchString = '';\n      value = $.trim(value);\n      if (value) {\n        if (value.indexOf('!=') === 0) {\n          value = $.trim(value.replace('!=', ''));\n          if (value) {\n            if (value === 'NULL') {\n              searchString = dataTableColumn.dataSrc() + ' ne null';\n            } else if (value === '!NULL') {\n              searchString = dataTableColumn.dataSrc() + ' eq null';\n            } else if (!isNaN(value)) {\n              searchString = dataTableColumn.dataSrc() + ' ne ' + value;\n            }\n          }\n        } else if (value.indexOf('>=') === 0) {\n          value = $.trim(value.replace('>=', ''));\n          if (value && !isNaN(value)) {\n            searchString = dataTableColumn.dataSrc() + ' ge ' + value;\n          }\n        } else if (value.indexOf('>') === 0) {\n          value = $.trim(value.replace('>', ''));\n          if (value && !isNaN(value)) {\n            searchString = dataTableColumn.dataSrc() + ' gt ' + value;\n          }\n        } else if (value.indexOf('<=') === 0) {\n          value = $.trim(value.replace('<=', ''));\n          if (value && !isNaN(value)) {\n            searchString = dataTableColumn.dataSrc() + ' le ' + value;\n          }\n        } else if (value.indexOf('<') === 0) {\n          value = $.trim(value.replace('<', ''));\n          if (value && !isNaN(value)) {\n            searchString = dataTableColumn.dataSrc() + ' lt ' + value;\n          }\n        } else if (value.indexOf('-') !== -1 || value.toLowerCase().indexOf('to') !== -1) {\n          value = value.replace(/to/ig, '-');\n          var values = value.split('-').map(function (value) {\n            return $.trim(value);\n          });\n          if (values[0] && !isNaN(values[0])) {\n            searchString = dataTableColumn.dataSrc() + ' ge ' + values[0];\n            if (values[1] && !isNaN(values[1]) && +values[1] >= +values[0]) {\n              searchString = searchString + ' and ' + dataTableColumn.dataSrc() + ' le ' + values[1];\n            }\n          }\n        } else {\n          if (value.indexOf('=') === 0) {\n            value = $.trim(value.replace('=', ''));\n          }\n          if (value) {\n            if (value === 'NULL') {\n              searchString = dataTableColumn.dataSrc() + ' eq null';\n            } else if (value === '!NULL') {\n              searchString = dataTableColumn.dataSrc() + ' ne null';\n            } else if (!isNaN(value)) {\n              searchString = dataTableColumn.dataSrc() + ' eq ' + value;\n            }\n          }\n        }\n      }\n      return searchString;\n    },\n\n    stringContains: function stringContains(value, dataTableColumn, index) {\n      var searchString = '';\n      if (value) {\n        if (value === 'NULL') {\n          searchString = dataTableColumn.dataSrc() + ' eq null';\n        } else if (value === '!NULL') {\n          searchString = dataTableColumn.dataSrc() + ' ne null';\n        } else {\n          searchString = 'contains(tolower(' + dataTableColumn.dataSrc() + '),\\'' + value.toLowerCase() + '\\')';\n        }\n      }\n      return searchString;\n    },\n\n    stringEquals: function stringEquals(value, dataTableColumn, index) {\n      var searchString = '';\n      if (value) {\n        if (value === 'NULL') {\n          searchString = dataTableColumn.dataSrc() + ' eq null';\n        } else if (value === '!NULL') {\n          searchString = dataTableColumn.dataSrc() + ' ne null';\n        } else {\n          searchString = 'tolower(' + dataTableColumn.dataSrc() + ') eq \\'' + value.toLowerCase() + '\\'';\n        }\n      }\n      return searchString;\n    }\n  }\n});"]}