{"version":3,"sources":["backbone/scripts/odata_collection.min.js"],"names":["ODataCollection","Backbone","Collection","extend","$count","$filter","$select","count","data","fetch","options","arguments","length","undefined","this","_","result","split","concat","map","value","$","trim","filter","index","array","indexOf","join","k","push","processData","prototype","call","model","attrs","ODataModel","parse","response"],"mappings":"AAAA,aAKA,IAAIA,gBAAkBC,SAASC,WAAWC,OAAO,CAC/CC,QAAQ,EAERC,QAAS,KAETC,QAAS,KAETC,MAAO,KAEPC,KAAM,GAENC,MAAO,WACL,IAAIC,EAA6B,EAAnBC,UAAUC,aAA+BC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,GAElFG,KAAKP,MAAQ,KAEbO,KAAKN,KAAOE,EAAQF,MAAQ,GAEE,MAA1BE,EAAQF,KAAa,SACvBE,EAAQF,KAAa,OAAIO,EAAEC,OAAOF,KAAM,WAG1C,IAAIT,EAAUU,EAAEC,OAAOF,KAAM,WACzBT,IACFK,EAAQF,KAAc,QAAIH,GAAWK,EAAQF,KAAc,QAAI,QAAUE,EAAQF,KAAc,QAAI,KAGrG,IAAIF,EAAUS,EAAEC,OAAOF,KAAM,WACzBR,IACFI,EAAQF,KAAc,QAAIF,EAAQW,MAAM,KAAKC,OAAOR,EAAQF,KAAc,QAAIE,EAAQF,KAAc,QAAES,MAAM,KAAO,IAAIE,IAAI,SAAUC,GACnI,OAAOC,EAAEC,KAAKF,KACbG,OAAO,SAAUH,EAAOI,EAAOC,GAChC,OAAOA,EAAMC,QAAQN,KAAWI,IAC/BG,KAAK,MAGV,IAAInB,EAAO,GACX,IAAK,IAAIoB,KAAKlB,EAAQF,KACpBA,EAAKqB,KAAKD,EAAI,IAAMlB,EAAQF,KAAKoB,IAMnC,OAJAlB,EAAQF,KAAOA,EAAKmB,KAAK,KAEzBjB,EAAQoB,aAAc,EAEf7B,SAASC,WAAW6B,UAAUtB,MAAMuB,KAAKlB,KAAMJ,IAGxDuB,MAAO,SAAeC,EAAOxB,GAC3B,OAAO,IAAIyB,WAAWD,EAAOxB,IAG/B0B,MAAO,SAAeC,EAAU3B,GAK9B,OAJI2B,EAAS,kBACXvB,KAAKP,MAAQ8B,EAAS,iBAGjBpC,SAASC,WAAW6B,UAAUK,MAAMJ,KAAKlB,KAAMuB,EAASjB","file":"odata_collection.min.js","sourcesContent":["'use strict';\n\n/* global _ Backbone ODataModel */\n\n/* exported ODataCollection */\nvar ODataCollection = Backbone.Collection.extend({\n  $count: true,\n\n  $filter: null,\n\n  $select: null,\n\n  count: null,\n\n  data: {},\n\n  fetch: function fetch() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    this.count = null;\n\n    this.data = options.data || {};\n\n    if (options.data['$count'] == null) {\n      options.data['$count'] = _.result(this, '$count');\n    }\n\n    var $filter = _.result(this, '$filter');\n    if ($filter) {\n      options.data['$filter'] = $filter + (options.data['$filter'] ? ' and ' + options.data['$filter'] : '');\n    }\n\n    var $select = _.result(this, '$select');\n    if ($select) {\n      options.data['$select'] = $select.split(',').concat(options.data['$select'] ? options.data['$select'].split(',') : []).map(function (value) {\n        return $.trim(value);\n      }).filter(function (value, index, array) {\n        return array.indexOf(value) === index;\n      }).join(',');\n    }\n\n    var data = [];\n    for (var k in options.data) {\n      data.push(k + '=' + options.data[k]);\n    }\n    options.data = data.join('&');\n\n    options.processData = false;\n\n    return Backbone.Collection.prototype.fetch.call(this, options);\n  },\n\n  model: function model(attrs, options) {\n    return new ODataModel(attrs, options);\n  },\n\n  parse: function parse(response, options) {\n    if (response['@odata.count']) {\n      this.count = response['@odata.count'];\n    }\n\n    return Backbone.Collection.prototype.parse.call(this, response.value);\n  }\n});"]}