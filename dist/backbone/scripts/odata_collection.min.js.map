{"version":3,"sources":["backbone/scripts/odata_collection.min.js"],"names":["ODataCollection","Backbone","Collection","extend","$count","$filter","$select","count","data","model","attrs","options","ODataModel","fetch","arguments","length","undefined","this","_","result","split","concat","map","value","$","trim","filter","index","array","indexOf","join","k","push","processData","prototype","call","parse","response"],"mappings":"AAAA,aAKA,IAAIA,gBAAkBC,SAASC,WAAWC,OAAO,CAI/CC,QAAQ,EAERC,QAAS,KAETC,QAAS,KAETC,MAAO,KAEPC,KAAM,KAENC,MAAO,SAAeC,EAAOC,GAC3B,OAAO,IAAIC,WAAWF,EAAOC,IAK/BE,MAAO,WACL,IAAIF,EAA6B,EAAnBG,UAAUC,aAA+BC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,GAElFG,KAAKV,MAAQ,KAEbU,KAAKT,KAAOG,EAAQH,MAAQ,GAEE,MAA1BG,EAAQH,KAAa,SACvBG,EAAQH,KAAa,OAAIU,EAAEC,OAAOF,KAAM,WAG1C,IAAIZ,EAAUa,EAAEC,OAAOF,KAAM,WACzBZ,IACFM,EAAQH,KAAc,QAAIH,GAAWM,EAAQH,KAAc,QAAI,QAAUG,EAAQH,KAAc,QAAI,KAGrG,IAAIF,EAAUY,EAAEC,OAAOF,KAAM,WACzBX,IACFK,EAAQH,KAAc,QAAIF,EAAQc,MAAM,KAAKC,OAAOV,EAAQH,KAAc,QAAIG,EAAQH,KAAc,QAAEY,MAAM,KAAO,IAAIE,IAAI,SAAUC,GACnI,OAAOC,EAAEC,KAAKF,KACbG,OAAO,SAAUH,EAAOI,EAAOC,GAChC,OAAOA,EAAMC,QAAQN,KAAWI,IAC/BG,KAAK,MAGV,IAAItB,EAAO,GACX,IAAK,IAAIuB,KAAKpB,EAAQH,KACpBA,EAAKwB,KAAKD,EAAI,IAAMpB,EAAQH,KAAKuB,IAMnC,OAJApB,EAAQH,KAAOA,EAAKsB,KAAK,KAEzBnB,EAAQsB,aAAc,EAEfhC,SAASC,WAAWgC,UAAUrB,MAAMsB,KAAKlB,KAAMN,IAGxDyB,MAAO,SAAeC,EAAU1B,GAK9B,OAJI0B,EAAS,kBACXpB,KAAKV,MAAQ8B,EAAS,iBAGjBpC,SAASC,WAAWgC,UAAUE,MAAMD,KAAKlB,KAAMoB,EAASd","file":"odata_collection.min.js","sourcesContent":["'use strict';\n\n/* global _ Backbone ODataModel */\n\n/* exported ODataCollection */\nvar ODataCollection = Backbone.Collection.extend({\n\n  // PROPERTY DEFINITION\n\n  $count: true,\n\n  $filter: null,\n\n  $select: null,\n\n  count: null,\n\n  data: null,\n\n  model: function model(attrs, options) {\n    return new ODataModel(attrs, options);\n  },\n\n  // METHOD DEFINITION\n\n  fetch: function fetch() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    this.count = null;\n\n    this.data = options.data || {};\n\n    if (options.data['$count'] == null) {\n      options.data['$count'] = _.result(this, '$count');\n    }\n\n    var $filter = _.result(this, '$filter');\n    if ($filter) {\n      options.data['$filter'] = $filter + (options.data['$filter'] ? ' and ' + options.data['$filter'] : '');\n    }\n\n    var $select = _.result(this, '$select');\n    if ($select) {\n      options.data['$select'] = $select.split(',').concat(options.data['$select'] ? options.data['$select'].split(',') : []).map(function (value) {\n        return $.trim(value);\n      }).filter(function (value, index, array) {\n        return array.indexOf(value) === index;\n      }).join(',');\n    }\n\n    var data = [];\n    for (var k in options.data) {\n      data.push(k + '=' + options.data[k]);\n    }\n    options.data = data.join('&');\n\n    options.processData = false;\n\n    return Backbone.Collection.prototype.fetch.call(this, options);\n  },\n\n  parse: function parse(response, options) {\n    if (response['@odata.count']) {\n      this.count = response['@odata.count'];\n    }\n\n    return Backbone.Collection.prototype.parse.call(this, response.value);\n  }\n});"]}