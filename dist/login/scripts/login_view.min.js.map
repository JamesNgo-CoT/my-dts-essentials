{"version":3,"sources":["login/scripts/login_view.min.js"],"names":["LoginView","Backbone","View","extend","tagName","template","_","doLogin","this","model","showLogin","$originatingElement","$el","find","then","history","stop","start","doLogout","logout","events","click .btn-login","click .btn-logout","render","html","toJSON","Promise","resolve","initialize","arguments","length","undefined","listenTo"],"mappings":"AAAA,aAKA,IAAIA,UAAYC,SAASC,KAAKC,OAAO,CAInCC,QAAS,OAETC,SAAUC,EAAED,SAAS,kaAIrBE,QAAS,WACPC,KAAKC,MAAMC,UAAU,CAAEC,oBAAqBH,KAAKI,IAAIC,KAAK,YAAaC,KAAK,WAC1Eb,SAASc,QAAQC,OACjBf,SAASc,QAAQE,WAIrBC,SAAU,WACRV,KAAKC,MAAMU,UAGbC,OAAQ,CACNC,mBAAoB,UACpBC,oBAAqB,YAKvBC,OAAQ,WAEN,OADAf,KAAKI,IAAIY,KAAKhB,KAAKH,SAAS,CAAEI,MAAOD,KAAKC,MAAMgB,YACzCC,QAAQC,WAKjBC,WAAY,WACuB,EAAnBC,UAAUC,aAA+BC,IAAjBF,UAAU,IAAmBA,UAAU,GAE7ErB,KAAKwB,SAASxB,KAAKC,MAAO,SAAUD,KAAKe","file":"login_view.min.js","sourcesContent":["'use strict';\n\n/* global _ Backbone */\n\n/* exported LoginView */\nvar LoginView = Backbone.View.extend({\n\n  // PROPERTY DEFINITION\n\n  tagName: 'form',\n\n  template: _.template('\\n    <span class=\"visible-print-inline\">Logged in as</span>\\n    <%= model.lastName || \\'\\' %><%= model.lastName && model.firstName  ? \\',\\' : \\'\\' %>\\n    <%= model.firstName || \\'\\' %>\\n    <% if (model.sid == null) { %>\\n    <button type=\"button\" class=\"btn btn-primary btn-login\">Login</button>\\n    <% } else { %>\\n    <button type=\"button\" class=\"btn btn-default btn-logout\">Logout</button>\\n    <% } %>\\n  '),\n\n  // EVENT HANDLER DEFINITION\n\n  doLogin: function doLogin() {\n    this.model.showLogin({ $originatingElement: this.$el.find('button') }).then(function () {\n      Backbone.history.stop();\n      Backbone.history.start();\n    });\n  },\n\n  doLogout: function doLogout() {\n    this.model.logout();\n  },\n\n  events: {\n    'click .btn-login': 'doLogin',\n    'click .btn-logout': 'doLogout'\n  },\n\n  // METHOD DEFINITION\n\n  render: function render() {\n    this.$el.html(this.template({ model: this.model.toJSON() }));\n    return Promise.resolve();\n  },\n\n  // INITIALIZER DEFINITION\n\n  initialize: function initialize() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    this.listenTo(this.model, 'change', this.render);\n  }\n});"]}