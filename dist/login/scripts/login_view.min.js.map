{"version":3,"sources":["login/scripts/login_view.min.js"],"names":["LoginView","Backbone","View","extend","$modal","tagName","template","_","doLogin","this","showLogin","$originatingElement","$el","find","then","history","stop","start","doLogout","model","cotLogin","logout","events","click .btn-login","click .btn-logout","requireLogin","options","_this","Promise","resolve","checkLogin","catch","reject","render","html","toJSON","_this2","arguments","length","undefined","modal","cot_app","showModal","title","body","loginMessage","footerButtonsHtml","originatingElement","$","className","onShown","onLogin","_this3","prop","username","val","password","login","error","displayLoginError","prependTo","fadeOut","remove","click","keydown","e","charCode","keyCode","onHidden","initialize","listenTo"],"mappings":"AAAA,aAKA,IAAIA,UAAYC,SAASC,KAAKC,OAAO,CAInCC,OAAQ,KAERC,QAAS,OAETC,SAAUC,EAAED,SAAS,kaAIrBE,QAAS,WACPC,KAAKC,UAAU,CAAEC,oBAAqBF,KAAKG,IAAIC,KAAK,YAAaC,KAAK,WACpEb,SAASc,QAAQC,OACjBf,SAASc,QAAQE,WAIrBC,SAAU,WACRT,KAAKU,MAAMC,SAASC,UAGtBC,OAAQ,CACNC,mBAAoB,UACpBC,oBAAqB,YAKvBC,aAAc,SAAsBC,GAClC,IAAIC,EAAQlB,KAEZ,OAAOmB,QAAQC,UAAUf,KAAK,WAC5B,OAAOa,EAAMR,MAAMW,WAAWJ,KAC7BK,MAAM,WACP,OAAOJ,EAAMjB,UAAUgB,KACtBK,MAAM,WAEP,OADAJ,EAAMR,MAAME,SACLO,QAAQI,YAKnBC,OAAQ,WAEN,OADAxB,KAAKG,IAAIsB,KAAKzB,KAAKH,SAAS,CAAEa,MAAOV,KAAKU,MAAMgB,YACzCP,QAAQC,WAGjBnB,UAAW,WACT,IAAI0B,EAAS3B,KAETiB,EAA6B,EAAnBW,UAAUC,aAA+BC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,GAMlF,OAJI5B,KAAKL,QACPK,KAAKL,OAAOoC,MAAM,QAGb,IAAIZ,QAAQ,SAAUC,EAASG,GACpCI,EAAOhC,OAASqC,QAAQC,UAAU,CAChCC,MAAO,aACPC,KAAM,eAAiBR,EAAOjB,MAAMC,SAASM,QAAQmB,aAAe,gcACpEC,kBAAmB,iMACnBC,mBAAoBrB,EAAQf,qBAAuBqC,EAAEZ,EAAOjB,MAAMC,SAASM,QAAyB,iBAAGb,KAAK,WAC5GoC,UAAW,kBACXC,QAAS,WACP,SAASC,IACP,IAAIC,EAAS3C,KAEbA,KAAKL,OAAOS,KAAK,QAAQwC,KAAK,YAAY,GAE1C,IAAIC,EAAW7C,KAAK+B,MAAM3B,KAAK,uBAAuB0C,MAClDC,EAAW/C,KAAK+B,MAAM3B,KAAK,uBAAuB0C,MAClDD,GAAYE,EACd/C,KAAK+B,MAAMiB,MAAMH,EAAUE,GAAU1C,KAAK,WACxCsC,EAAOhD,OAAOoC,MAAM,QACpBY,EAAOhD,OAAOS,KAAK,QAAQwC,KAAK,YAAY,IAC3C,SAAUK,GACX,SAASC,EAAkBD,GACzBV,EAAE,gDAAkDU,EAAQ,UAAUE,UAAUnD,KAAK+B,MAAM3B,KAAK,gBAAgBgD,QAAQ,IAAM,WAC5Hb,EAAEvC,MAAMqD,WAKVH,EADY,wBAAVD,EACgB,gCAEA,uCAEpBN,EAAOhD,OAAOS,KAAK,QAAQwC,KAAK,YAAY,KAG9C5C,KAAKL,OAAOS,KAAK,QAAQwC,KAAK,YAAY,GAG9CjB,EAAOjB,MAAMC,SAASoB,MAAM3B,KAAK,kBAAkBkD,MAAM,WACvDZ,MAEFf,EAAOjB,MAAMC,SAASoB,MAAM3B,KAAK,qBAAqBmD,QAAQ,SAAUC,GAC/B,MAAlCA,EAAEC,UAAYD,EAAEE,SAAW,IAC9BhB,OAINiB,SAAU,WACRhC,EAAOjB,MAAMW,WAAWJ,GAASZ,KAAK,WACpCe,KACC,WACDG,YAUVqC,WAAY,WACuB,EAAnBhC,UAAUC,aAA+BC,IAAjBF,UAAU,IAAmBA,UAAU,GAE7E5B,KAAK6D,SAAS7D,KAAKU,MAAO,SAAUV,KAAKwB","file":"login_view.min.js","sourcesContent":["'use strict';\n\n/* global _ Backbone cot_app */\n\n/* exported LoginView */\nvar LoginView = Backbone.View.extend({\n\n  // PROPERTY DEFINITION\n\n  $modal: null,\n\n  tagName: 'form',\n\n  template: _.template('\\n    <span class=\"visible-print-inline\">Logged in as</span>\\n    <%= model.lastName || \\'\\' %><%= model.lastName && model.firstName  ? \\',\\' : \\'\\' %>\\n    <%= model.firstName || \\'\\' %>\\n    <% if (model.sid == null) { %>\\n    <button type=\"button\" class=\"btn btn-primary btn-login\">Login</button>\\n    <% } else { %>\\n    <button type=\"button\" class=\"btn btn-default btn-logout\">Logout</button>\\n    <% } %>\\n  '),\n\n  // EVENT HANDLER DEFINITION\n\n  doLogin: function doLogin() {\n    this.showLogin({ $originatingElement: this.$el.find('button') }).then(function () {\n      Backbone.history.stop();\n      Backbone.history.start();\n    });\n  },\n\n  doLogout: function doLogout() {\n    this.model.cotLogin.logout();\n  },\n\n  events: {\n    'click .btn-login': 'doLogin',\n    'click .btn-logout': 'doLogout'\n  },\n\n  // METHOD DEFINITION\n\n  requireLogin: function requireLogin(options) {\n    var _this = this;\n\n    return Promise.resolve().then(function () {\n      return _this.model.checkLogin(options);\n    }).catch(function () {\n      return _this.showLogin(options);\n    }).catch(function () {\n      _this.model.logout();\n      return Promise.reject();\n    });\n  },\n\n\n  render: function render() {\n    this.$el.html(this.template({ model: this.model.toJSON() }));\n    return Promise.resolve();\n  },\n\n  showLogin: function showLogin() {\n    var _this2 = this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (this.$modal) {\n      this.$modal.modal('hide');\n    }\n\n    return new Promise(function (resolve, reject) {\n      _this2.$modal = cot_app.showModal({\n        title: 'User Login',\n        body: '\\n          ' + _this2.model.cotLogin.options.loginMessage + '\\n          <form>\\n            <div class=\"form-group\">\\n              <label for=\"cot_login_username\">Username</label>:\\n              <input class=\"form-control\" id=\"cot_login_username\">\\n            </div>\\n            <div class=\"form-group\">\\n              <label for=\"cot_login_password\">Password</label>:\\n              <input class=\"form-control\" type=\"password\" id=\"cot_login_password\">\\n            </div>\\n          </form>\\n        ',\n        footerButtonsHtml: '\\n          <button class=\"btn btn-success\" type=\"button\" data-dismiss=\"modal\">Cancel</button>\\n          <button class=\"btn btn-success btn-cot-login\" type=\"button\">Login</button>\\n        ',\n        originatingElement: options.$originatingElement || $(_this2.model.cotLogin.options['welcomeSelector']).find('a.login'),\n        className: 'cot-login-modal',\n        onShown: function onShown() {\n          function onLogin() {\n            var _this3 = this;\n\n            this.$modal.find('.btn').prop('disabled', true);\n\n            var username = this.modal.find('#cot_login_username').val();\n            var password = this.modal.find('#cot_login_password').val();\n            if (username && password) {\n              this.modal.login(username, password).then(function () {\n                _this3.$modal.modal('hide');\n                _this3.$modal.find('.btn').prop('disabled', false);\n              }, function (error) {\n                function displayLoginError(error) {\n                  $('<div class=\"alert alert-danger\" role=\"alert\">' + error + '</div>').prependTo(this.modal.find('.modal-body')).fadeOut(5000, function () {\n                    $(this).remove();\n                  });\n                }\n\n                if (error === 'invalid_user_or_pwd') {\n                  displayLoginError('Invalid username or password.');\n                } else {\n                  displayLoginError('Unable to log in. Please try again.');\n                }\n                _this3.$modal.find('.btn').prop('disabled', false);\n              });\n            } else {\n              this.$modal.find('.btn').prop('disabled', false);\n            }\n          }\n          _this2.model.cotLogin.modal.find('.btn-cot-login').click(function () {\n            onLogin();\n          });\n          _this2.model.cotLogin.modal.find('.modal-body input').keydown(function (e) {\n            if ((e.charCode || e.keyCode || 0) === 13) {\n              onLogin();\n            }\n          });\n        },\n        onHidden: function onHidden() {\n          _this2.model.checkLogin(options).then(function () {\n            resolve();\n          }, function () {\n            reject();\n          });\n        }\n      });\n    });\n  },\n\n\n  // INITIALIZER DEFINITION\n\n  initialize: function initialize() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    this.listenTo(this.model, 'change', this.render);\n  }\n});"]}